# Set the user under which NGINX worker processes will run
user  nginx;

# Automatically determine the number of worker processes based on available CPU cores
worker_processes  auto;

# Specify the log file for error logging and set its level to 'warn'
error_log  /var/log/nginx/error.log warn;

# Specify the PID file for the NGINX master process
pid        /var/run/nginx.pid;

events {
    # Maximum number of simultaneous connections that can be opened by a worker process
    worker_connections  8192;

    # Use the epoll event processing method for efficient I/O handling on Linux
    use epoll; # Efficient I/O handling for Linux
}

# Stream block handles TCP/UDP traffic (used for proxying Minecraft server connections)
stream {
    upstream backend {
        # Define the backend Minecraft server and port
        # max_fails and fail_timeout control when a backend is considered unavailable
        server ${BACKEND_SERVER}:25565 max_fails=300 fail_timeout=300s;
    }

    server {
        # Listen for incoming Minecraft connections on port 25565
        listen 25565;

        # Pass all incoming connections to the upstream backend server
        proxy_pass backend;

        # Enable TCP_NODELAY to send packets immediately, reducing latency for real-time applications like Minecraft
        tcp_nodelay on;

        # Enable SO_KEEPALIVE to detect dead peers and keep long-lived connections alive
        so_keepalive on;

        # Set a lower proxy buffer size to minimize buffering and reduce latency (default is 8k)
        proxy_buffer_size 4k;

        # Set a timeout for proxy connections to the backend server
        proxy_timeout 15s;
    }
}
